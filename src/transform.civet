{ decl } from ./transforms/decl.civet
{ importTransform } from ./transforms/import.civet
{ requiredTransform } from ./transforms/required.civet
* as ts from @typescript-eslint/typescript-estree
type { Options } from ./cli.civet
MagicString from magic-string

export transforms := new Map [
    ["decl", decl]
    ["import", importTransform]
]

export type Node = ts.TSESTree.Node // current node
export type Pode = ts.TSESTree.Node | undefined // parent node
export type Code = MagicString // code

export type Transform = (node: Node, pode: Pode, code: Code) => void

export function transform(
  tscode: string
  path: string
  options: Options
)
    parsed .= ts.parse tscode,
        filePath: path,
        range: true

    code := new MagicString tscode
    enters := options.transform.map (t) => transforms.get(t)!
    ts.simpleTraverse parsed,
        enter: (node, parent) ->
            requiredTransform node, parent, code // ts/civet incompatabilities
            for enter of enters
                enter node, parent, code

    code.appendLeft 0, `// Generated by ts2civet: ${new Date()}\n\n`

    if options.debug
        require("fs").writeFileSync `${path}.json`, JSON.stringify parsed, null, 2
    code.toString()