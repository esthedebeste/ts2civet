{ decl } from ./transforms/decl.civet
{ importTransform } from ./transforms/import.civet
{ object } from ./transforms/object.civet
{ requiredTransform } from ./transforms/required.civet
* as ts from @typescript-eslint/typescript-estree
MagicString from magic-string

export transforms := new Map [
    ["decl", decl]
    ["import", importTransform]
    ["object", object]
] as const

export type Transform = Parameters<typeof transforms["get"]>[0]

export interface Options
    transform: Transform[] | "all"
    debug?: boolean

export function transform(
  tscode: string
  path: string
  options: Options
): string
    { transform, debug } := options
    parsed .= ts.parse tscode,
        filePath: path,
        range: true

    code := new MagicString tscode
    enters := if transform is "all" then transforms.values() else transform.map (t) => transforms.get(t)!
    ts.simpleTraverse parsed,
        enter: (node, parent) ->
            requiredTransform node, parent, code // fix all ts/civet incompatabilities
            for enter of enters
                enter node, parent, code

    code.appendLeft 0, `// Generated by ts2civet: ${new Date()}\n\n`

    if debug
        import("node:fs").then .writeFileSync `${path}.json`, JSON.stringify parsed, null, 2
    code.toString()